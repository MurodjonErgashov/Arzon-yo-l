<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    

  <!-- slider stylesheet -->
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css" />

  <!-- bootstrap core css -->
  <link rel="stylesheet" type="text/css" href="/css/bootstrap.css" />

  <!-- fonts style -->
  <link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">

  <!-- Custom styles for this template -->
  <link href="/css/style.css" rel="stylesheet" />
  <!-- responsive style -->
  <link href="/css/responsive.css" rel="stylesheet" />
  <style>
    #totalPrice:hover{
        background-color: #c1c1c1;
        border-radius: 5px;
    }
 
    #img-profile{
      border-radius: 50%;
      border: 3px solid #c1c1c1;
    }

    /* ----------------------------------------------------- */
    * {
  padding: 0px;
  margin: 0px;
}
/* #wrapper {
  background: #535F82;
  width: 100%;
  height: 100vh;
}
.card {
  border-radius: 0.5rem;
  box-shadow: 0px 0px 5px 3px rgba(0, 0, 0, 0.39);
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 1.5rem;
  width: 90%;
} */
.card img {
  border: 3px solid #3D4399;
}
.card h4 {
  color: #737373;
  font-family: Helvetica, sans-serif;
  font-weight: bold;
  letter-spacing: -0.1rem;
  padding-bottom: 0.5rem;
}
.card textarea {
  width: 100%;
  background: #eee;
  outline: none;
  border: none;
  padding: 0.5rem;
  resize: none;
  box-shadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.19);
  border-radius: 2px;
  margin-bottom: 0.3rem;
  color: #737373;
}
/* .card button {
  background: #3D4399;
  color: #ffffff;
  padding: 0.3rem 0.5rem;
  border-radius: 0.4rem;
  font-size: 0.6rem;
  text-transform: uppercase;
  font-weight: light;
  letter-spacing: 2px;
  border: none;
  cursor: pointer;
  outline: none;
} */
.card button:hover {
  background: #c1c1c1;
  transition: all 1s;
}
.card ul {
  border-top: 1px solid #737373;
  padding-top: 15px;
  margin-top: 15px;
}
.card li {
  list-style: none;
  display: inline-block;
  padding-right: 25px;
  cursor: pointer;
}
.card li:hover {
  opacity: 0.4;
  transition: color 3s;
}
.card li.like::after {
  font-family: 'Font Awesome 5 Free';
  content: "✅";
  visibility: visible;
  font-weight: 900;
  padding-left: 5px;
}
.card li.likeClicked {
  color: #3D4399;
}
.card li.likeClicked:hover {
  opacity: 1;
  cursor: default;
}
.card li.reply::after {
  font-family: 'Font Awesome 5 Free';
  content: "✍️";
  visibility: visible;
  font-weight: 900;
  padding-left: 5px;
}
.statusBox {
  background: #eee;
  padding: 1rem;
  animation-name: fadeIn;
  animation: fadeIn 1.5s;
  border-radius: 5px;
  font-size: 14px;
  color: #737373;
  margin-top: 15px;
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

input.removeButton:hover {
  background: #c1c1c1;
  transition: all 1s;
}
.shit {
  background: #eee;
  padding: 10px;
}
.deleteComment {
  float: right;
  cursor: pointer;
}
.deleteComment:hover {
  opacity: 0.3;
  transition: all 1s;
}
.deleteComment::before {
  font-family: 'Font Awesome 5 Free';
  content: "\f2ed";
  visibility: visible;
  font-weight: 900;
  float: right;
  padding-left: 5px;
} 

/* * {
  box-sizing: border-box;
}
.container {
  background-image: url("https://www.toptal.com/designers/subtlepatterns/patterns/concrete-texture.png");
  display: flex;
  flex-wrap: wrap;
  height: 100vh;
  align-items: center;
  justify-content: center;
  padding: 0 20px;
} */
.rating {
  display: flex;
  width: 100%;
  justify-content: center;
  overflow: hidden;
  flex-direction: row-reverse;
  height: 150px;
  position: relative;
}
.rating-0 {
  filter: grayscale(100%);
}
.rating > input {
  display: none;
}
.rating > label {
  cursor: pointer;
  width: 40px;
  height: 40px;
  margin-top: auto;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='126.729' height='126.73'%3e%3cpath fill='%23e3e3e3' d='M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 76%;
  transition: 0.3s;
}
.rating > input:checked ~ label, .rating > input:checked ~ label ~ label {
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='126.729' height='126.73'%3e%3cpath fill='%23fcd93a' d='M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z'/%3e%3c/svg%3e");
}
.rating > input:not(:checked) ~ label:hover, .rating > input:not(:checked) ~ label:hover ~ label {
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='126.729' height='126.73'%3e%3cpath fill='%23d8b11e' d='M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z'/%3e%3c/svg%3e");
}
.emoji-wrapper {
  width: 100%;
  text-align: center;
  height: 100px;
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
}
.emoji-wrapper:before, .emoji-wrapper:after {
  content: "";
  height: 15px;
  width: 100%;
  position: absolute;
  left: 0;
  z-index: 1;
}
.emoji-wrapper:before {
  top: 0;
  background: linear-gradient(to bottom, white 0%, white 35%, rgba(255, 255, 255, 0) 100%);
}
.emoji-wrapper:after {
  bottom: 0;
  background: linear-gradient(to top, white 0%, white 35%, rgba(255, 255, 255, 0) 100%);
}
.emoji {
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: 0.3s;
}
.emoji > svg {
  margin: 15px 0;
  width: 70px;
  height: 70px;
  flex-shrink: 0;
}
#rating-1:checked ~ .emoji-wrapper > .emoji {
  transform: translateY(-100px);
}
#rating-2:checked ~ .emoji-wrapper > .emoji {
  transform: translateY(-200px);
}
#rating-3:checked ~ .emoji-wrapper > .emoji {
  transform: translateY(-300px);
}
#rating-4:checked ~ .emoji-wrapper > .emoji {
  transform: translateY(-400px);
}
#rating-5:checked ~ .emoji-wrapper > .emoji {
  transform: translateY(-500px);
}
.feedback {
  max-width: 360px;
  background-color: #fff;
  width: 100%;
  padding: 30px;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-items: center;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.05);
}
.statusBox{
  border-bottom: 2px solid #777;
}
.statusBox h6{
  border-bottom: 2px solid #cecece;
  padding-bottom: 5px;
}
  </style>
</head>
<body>
      <!-- <div class="hero_area"> -->
        <%- include("driver_header") %>
          <div class="row mb-3">
                <div class="card col-md-6 col-sm-12 m-auto">
                    <div class="card-body">
                        <h1 class=""><%= statistics[0].avarg  %>/5</h1>
                        <p><%= statistics[0].counts  %> rating</p>
                        <div class="p-3" style="border-left: 3px solid #777;">
                       
                            <a href="#" id="totalPrice" class="btn btn-outline border-bottom py-3 border-top w-100 d-flex justify-content-between">Excelent<span class="badge badge-secondary"><%= statistics[0].count_excell %></span> </a>
                            <a href="#" id="totalPrice" class="btn btn-outline border-bottom py-3 border-top w-100 d-flex justify-content-between">Very Good<span class="badge badge-secondary"><%= statistics[0].count_vgood  %></span> </a>
                            <a href="#" id="totalPrice" class="btn btn-outline border-bottom py-3 border-top w-100 d-flex justify-content-between">Good<span class="badge badge-secondary"><%= statistics[0].count_good  %></span> </a>
                            <a href="#" id="totalPrice" class="btn btn-outline border-bottom py-3 border-top w-100 d-flex justify-content-between">Bad<span class="badge badge-secondary"><%= statistics[0].count_bad  %></span> </a>
                            <a href="#" id="totalPrice" class="btn btn-outline border-bottom py-3 border-top w-100 d-flex justify-content-between">Awfull<span class="badge badge-secondary"><%= statistics[0].count_awfull  %></span> </a>
                        </div>
                    </div>
            </div>
          </div>
      <div class="row">
          <aside class="card col-md-6 col-sm-12 m-auto"></aside>
      </div>

      <script>
        //card
const detailsCard = (name, button) => {
  return {
    name,
    button,
    showDetails(){
    return `
<div class="row">
 
</div>
<div class="row">
  <div class="col-12">
    <div id="addTask">
      <div class="statusBox">
        <% for( let i = 0; i < comments.length; i++ ) { %>    
          <h6><%= comments[i].ismi %></h6>
          <p>Status: <%= comments[i].status %></p>
          <%= comments[i].comment %>
        <% } %>
      </div>
    </div>
  </div>
</div>
`
  }
};
};

let detailsUpdate = detailsCard("Haydovchining ismi", "Update Status");

document.querySelector("aside.card").innerHTML = detailsUpdate.showDetails();

const addToFunc = () =>{
   // gets value from main text area
    let userName = detailsUpdate.name;
    let input = document.getElementById('inputStatus').value;
     // creates element for the value of input
    let title = document.createElement("h6");
    let status = document.createElement("p");
    let span = document.createElement("p");
    let reply = document.createElement("ul");
    let deleteButton = document.createElement("li");
    let like = document.createElement("li");
    let replyList = document.createElement("li");
    like.innerHTML = "Like";
    replyList.innerHTML = "Add Comment";
    title.innerHTML = userName;
    span.innerHTML="Status: Excellent"
  //creates a node for the original input
    let textnode = document.createTextNode(input);
    status.appendChild(span);
    status.appendChild(textnode);
    status.prepend(title);
    status.appendChild(reply);
    reply.appendChild(like);
    reply.appendChild(replyList);
    reply.appendChild(deleteButton);
    document.getElementById('addTask').appendChild(status);
    status.classList.add("statusBox");
    // like.classList.add("like");
    // replyList.classList.add("reply");
    //userName.classList.add("title");
  
    //creates a container for the remove button
    let statusBox = document.createElement("div");
    //creates a button to delete status
    let removeTask = document.createElement('input');
    // adds type of which it is a button
    removeTask.setAttribute('type', 'button');
    // removeTask.classList.add("removeButton");
    removeTask.classList.add("btn");
    removeTask.classList.add("btn-sm");
    removeTask.classList.add("btn-danger");
    // sets the buttons value 
    removeTask.setAttribute("value", "delete");
    // sets the button next to the status text
    deleteButton.appendChild(removeTask);
    //sets the button to remove status
    removeTask.addEventListener('click', function() {
        status.parentNode.removeChild(status);
    }, false);
    like.addEventListener('click', function() {
        this.classList.add("likeClicked");
    }, false);
  
  //For reply 
    replyList.addEventListener('click', function() {
       this.classList.add("likeClicked");
       let luke = document.getElementById('addTask');
       let skywalker = document.createElement("textarea");
       let replied = document.createElement("p");
       let leia = document.createElement("input");
       leia.setAttribute('type', 'button');
       leia.setAttribute("value", "reply");
       leia.setAttribute("class","removeButton");
       skywalker.setAttribute("id","pushReply");
       skywalker.setAttribute("placeholder", "Reply to this comment");
       luke.appendChild(skywalker);
       luke.appendChild(leia);
       luke.appendChild(replied);
       leia.addEventListener('click', function(){
         let replyInput =     document.getElementById('pushReply').value;
         let replyNode = document.createTextNode(replyInput);
         replied.appendChild(replyNode);
         if(replyInput === ""){
         replied.classList.remove("statusBox");
         skywalker.parentNode.removeChild(skywalker);
         this.parentNode.removeChild(this);
         }else{
         let replyName = document.createElement("h6");
         let deleteComment = document.createElement("p");
         deleteComment.innerHTML = "Delete";
         deleteComment.classList.add("deleteComment");
         replyName.innerHTML = `${userName} says:`;
         replied.prepend(replyName);
         replied.prepend(deleteComment);
         replied.classList.add("statusBox");
         skywalker.parentNode.removeChild(skywalker);
         this.parentNode.removeChild(this);
           deleteComment.addEventListener('click', function() {
            replied.parentNode.removeChild(replied);
           }, false);
         }
       }, false);
    }, false);
  
};


const eraseText = () => {
  //erases placeholder text in textarea
    document.getElementById("inputStatus").value = "";
};
        </script>
</body>
</html>